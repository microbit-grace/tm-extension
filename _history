{"entries":[{"timestamp":1759328946107,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":32,"diffs":[[1,"    \"name\": \"TMv1Integration\",\n"]]}]}]},{"timestamp":1759328951265,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":965,"length1":0,"diffs":[[1,"bluetooth.onBluetoothConnected(function () {\n    basic.showIcon(IconNames.Happy)\n})\nbluetooth.onBluetoothDisconnected(function () {\n    servoMode = \"\"\n    basic.showIcon(IconNames.Sad)\n})\n\n"]]}]}]},{"timestamp":1759336420353,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2490,"length1":0,"diffs":[[1,"// BLE commands\nBLECommands.onCommandwithArg(\"speech\", function (value) {\n    triggerCommands(\"speech\", value)\n})\nBLECommands.onCommandwithArg(\"camera\", function (value) {\n    triggerCommands(\"camera\", value)\n})\nBLECommands.onCommandwithArg(\"display\", function (value) {\n    triggerCommands(\"display\", value)\n})\nBLECommands.onCommandwithArg(\"servo\", function (value) {\n    triggerCommands(\"servo\", value)\n})\nBLECommands.onCommandwithArg(\"sound\", function (value) {\n    triggerCommands(\"sound\", value)\n})\n\n"]]}]}]},{"timestamp":1759336427123,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"J}U@pY^R7Duv{G8kr%k1\">value</variable><variable id=\"#z}!}v#@ga.A?ksrRXK-\">effect</variable><variable id=\"2[di|kp)4b~0FO[RKb)2\">sounds</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"2[di|kp)4b~0FO[RKb)2\">sounds</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_create_with\" inline=\"false\"><mutation items=\"9\" horizontalafter=\"3\"></mutation><value name=\"ADD0\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.giggle</field></block></value><value name=\"ADD1\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.happy</field></block></value><value name=\"ADD2\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.hello</field></block></value><value name=\"ADD3\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.mysterious</field></block></value><value name=\"ADD4\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.sad</field></block></value><value name=\"ADD5\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.soaring</field></block></value><value name=\"ADD6\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.spring</field></block></value><value name=\"ADD7\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.twinkle</field></block></value><value name=\"ADD8\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.yawn</field></block></value></block></value><next><block type=\"BLECommands_showPairingHistogram\"></block></next></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"575\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">servo</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"2\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1047\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">display</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"basic.showIcon(value)\" numlines=\"1\"></mutation></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1518\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">sound</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"#z}!}v#@ga.A?ksrRXK-\">effect</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_index_get\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"2[di|kp)4b~0FO[RKb)2\">sounds</field></block></value><value name=\"INDEX\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value></block></value><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#z}!}v#@ga.A?ksrRXK-\">effect</field></block></value><statement name=\"DO0\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">music.builtinPlayableSoundEffect(effect)</field></block></value></block></statement></block></next></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1524\" y=\"311\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">speech</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value></block><block type=\"bluetooth_on_connected\" x=\"0\" y=\"693\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"bluetooth_on_disconnected\" x=\"272\" y=\"693\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Sad</field></block></statement></block><block type=\"device_button_event\" x=\"573\" y=\"693\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"992\" y=\"693\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"1411\" y=\"693\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"const sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst speech = [\n    \"Hello\",\n    \"Awesome\",\n    \"Yes\"\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n"]]},{"start1":495,"length1":0,"diffs":[[1,"\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\n// Trigger commands\nconst triggerCommands = (cmd: string, value: number) => {\n    switch (cmd) {\n        case \"speech\": {\n            // TODO: allow string args and use value directly\n            billy.say(speech[value])\n            return;\n        }\n        case \"display\": {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n            return;\n        }\n        case \"camera\": {\n            if (input.magneticForce(Dimension.Z) > 350) {\n                BLECommands.sendCommandWithArgument(\"camera\", 1)\n            } else {\n                BLECommands.sendCommandWithArgument(\"camera\", 0)\n            }\n            return;\n        }\n        case \"servo\": {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n            return;\n        }\n        case \"sound\": {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\n// Serial commands\nserial.setRxBufferSize(128)\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), function() {\n    const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n    // basic.showString(commandStr[commandStr.length - 1])\n    const command = commandStr.split(\":\", 3)\n    serial.writeLine(commandStr)\n    if (command[0] === \"c\" && command.length > 2) {\n        triggerCommands(command[1], parseInt(command[2]))\n    } else {\n        serial.writeLine(\"unknown message type\")\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    BLECommands.sendCommandWithArgument(\"startRecord\", classId)\n    serial.writeString(`c:startRecord:${classId}\\n`)\n}\nconst endRecord = (classId: number) => {\n    BLECommands.sendCommandWithArgument(\"endRecord\", classId)\n    serial.writeString(`c:endRecord:${classId}\\n`)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n\nBLECommands.showPairingHistogram()"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":127,"length1":0,"diffs":[[1,"        \"pxt-bluetooth-commands\": \"github:jaustin/pxt-bluetooth-commands#aea492d96ec260d9a999efd17e38aaa1abe1da2f\",\n        \"bluetooth\": \"*\",\n        \"Billy\": \"github:adamish/pxt-billy#v0.0.25\",\n"]]},{"start1":407,"length1":63,"diffs":[[1,"        \"README.md\"\n"]]}]},{"type":"added","filename":"custom.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    //% blockId=ml_on_event_start\n    //% block=\"on ML green start\"\n    //% weight=50\n    export function onMLGreenStart(body: () => {}): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"},{"type":"added","filename":"default.ts","value":"// Default program\nconst sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst speech = [\n    \"Hello\",\n    \"Awesome\",\n    \"Yes\"\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n\n\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\n// Trigger commands\nconst triggerCommands = (cmd: string, value: number) => {\n    switch (cmd) {\n        case \"display\": {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n            return;\n        }\n        case \"servo\": {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n            return;\n        }\n        case \"sound\": {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\n// Serial commands\nserial.setRxBufferSize(128)\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n    const command = commandStr.split(\":\", 3)\n    if (command[0] === \"c\" && command.length > 2) {\n        triggerCommands(command[1], parseInt(command[2]))\n    } else {\n        serial.writeLine(\"unknown message type\")\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    serial.writeString(`c:startRecord:${classId}\\n`)\n}\nconst endRecord = (classId: number) => {\n    serial.writeString(`c:endRecord:${classId}\\n`)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n"}]},{"timestamp":1759337034694,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":123,"length1":0,"diffs":[[1,"enum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n"]]}]}]},{"timestamp":1759337047457,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":536,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":148,"length1":116,"diffs":[[1,"//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    //% blockId=ml_on_event_start\n"]]},{"start1":382,"length1":173,"diffs":[[1,"    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n"]]},{"start1":623,"length1":184,"diffs":[[1,""]]}]}]},{"timestamp":1759337441119,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>"]]}]}]},{"timestamp":1759392366076,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":536,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1759392372928,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":230,"length1":101,"diffs":[[1,""]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":2505,"length1":403,"diffs":[[1,""]]}]}]},{"timestamp":1759392972053,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":192,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":42,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":536,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":230,"length1":5,"diffs":[[1,"    let greenCallback = () => {}\n    let purpleCallback = () => {}\n    let orangeCallback = () => {}\n    //% blockId=ml_on_green_start\n"]]},{"start1":399,"length1":106,"diffs":[[1,"    //% weight=50\n    export function onMLGreenStart(body: () => {}): void {\n        // Add code here\n"]]},{"start1":508,"length1":0,"diffs":[[1,"    //% blockId=ml_on_purple_start\n"]]},{"start1":578,"length1":108,"diffs":[[1,"    //% weight=50\n    export function onMLPurpleStart(body: () => {}): void {\n        // Add code here\n"]]},{"start1":692,"length1":0,"diffs":[[1,"    //% blockId=ml_on_orange_start\n"]]},{"start1":762,"length1":108,"diffs":[[1,"    //% weight=50\n    export function onMLOrangeStart(body: () => {}): void {\n        // Add code here\n"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":2795,"length1":40,"diffs":[[1,""]]},{"start1":2904,"length1":2,"diffs":[[1,"} \n"]]}]}]},{"timestamp":1759393502278,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":536,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1759394111269,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"default.ts","patch":[{"start1":2795,"length1":38,"diffs":[[1,"        serial.writeString(commandStr);\n"]]}]}]},{"timestamp":1759394115446,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1160,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"Custom_onMLOrangeStart\" x=\"116\" y=\"215\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":287,"diffs":[[1,""]]},{"start1":37,"length1":103,"diffs":[[1,"\t\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":254,"length1":74,"diffs":[[1,"        \"default.ts\"\n"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":2323,"length1":34,"diffs":[[1,""]]}]},{"type":"added","filename":"commandMap.ts","value":"/**\n * Acts as a map of commands names to callbacks\n */\nnamespace SerialCommands {\n\n\n    export class CommandCallbacks {\n        private commandNames: string[]\n        private argCommandNames: string[]\n\n        private callbacks: (() => void)[]\n        private argCallbacks: ((value: number) => void)[]\n\n        public constructor() {\n            this.commandNames = []\n            this.argCommandNames = []\n            this.callbacks = []\n            this.argCallbacks = []\n        }\n\n        public addCommandCallback(commandName: string, callback: () => void) {\n            this.commandNames.push(commandName.toLowerCase())\n            this.callbacks.push(callback)\n        }\n\n        public addCommandCallbackwithArg(commandName: string, callback: (value: number) => void) {\n            this.argCommandNames.push(commandName.toLowerCase())\n            this.argCallbacks.push(callback)\n        }\n\n        public fireCallbackFor(commandName: string) {\n            const callbackIndex = this.commandNames.indexOf(commandName.toLowerCase())\n            if (callbackIndex == -1) {\n                return\n            }\n            this.callbacks[callbackIndex]()\n        }\n        public fireCallbackwithArgFor(commandName: string, arg: number) {\n            const callbackIndex = this.argCommandNames.indexOf(commandName.toLowerCase())\n            if (callbackIndex == -1) {\n                return\n            }\n            this.argCallbacks[callbackIndex](arg)\n        }\n    }\n}"},{"type":"added","filename":"serialCommand.ts","value":"\n/**\n * Serial event/command blocks\n */\nnamespace SerialCommands {\n    let initialised = false\n    export let callbacks: CommandCallbacks = null\n\n    function init(): void {\n        if (initialised) {\n            return\n        }\n        callbacks = new CommandCallbacks();\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), parseInput)\n        initialised = true\n    }\n    function parseInput(): void {\n        let commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n        let command = commandStr.split(\":\", 3)\n        serial.writeLine(commandStr)\n        if (command[0] === \"c\") {\n            if (command.length > 2) {\n                callbacks.fireCallbackwithArgFor(command[1], parseInt(command[2]))\n            } else {\n                callbacks.fireCallbackFor(command[1])\n            }\n        } else {\n            serial.writeLine(\"unknown message type\")\n        }\n    }\n    export function sendCommand(command: string): void {\n        serial.writeLine(\"c:\" + command)\n    }\n    export function sendCommandWithArgument(command: string, arg: number): void {\n        serial.writeLine(\"c:\" + command + \":\" + arg.toString())\n    }\n    export function onCommandwithArg(arg: string, handler: (value: number) => void) {\n        init()\n        callbacks.addCommandCallbackwithArg(arg, handler)\n    }\n    export function onCommand(arg: string, handler: () => void) {\n        init()\n        callbacks.addCommandCallback(arg, handler)\n\n    }\n}\n"}]},{"timestamp":1759394707378,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1291,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLOrangeStart\" x=\"52\" y=\"57\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></shadow></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"8\" y=\"172\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></shadow></value></block></statement></block><block type=\"Custom_onMLGreenStart\" x=\"16\" y=\"323\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":589,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":333,"length1":51,"diffs":[[1,"        onSerialCommand(\"green\", handler)\n"]]},{"start1":482,"length1":52,"diffs":[[1,"        onSerialCommand(\"purple\", handler)\n"]]},{"start1":636,"length1":52,"diffs":[[1,"        onSerialCommand(\"orange\", handler)\n"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":984,"length1":0,"diffs":[[1,"// Trigger commands\nconst triggerCommands = (cmd: string, value: number) => {\n    switch (cmd) {\n        case \"display\": {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n            return;\n        }\n        case \"servo\": {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n            return;\n        }\n        case \"sound\": {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\n"]]},{"start1":2124,"length1":108,"diffs":[[1,"serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n    const command = commandStr.split(\":\", 3)\n    serial.writeLine(commandStr);\n    if (command[0] === \"c\" && command.length > 2) {\n        triggerCommands(command[1], parseInt(command[2]))\n"]]},{"start1":2480,"length1":30,"diffs":[[1,"        serial.writeLine(\"unknown message type\")\n"]]},{"start1":2538,"length1":603,"diffs":[[1,""]]},{"start1":2539,"length1":0,"diffs":[[1,"const onSerialCommand = (expectedCommand: string, callback: () => void) => {\n    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n        const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine));\n        const command = commandStr.split(\":\", 2);\n        serial.writeLine(commandStr);\n        if (command[0] === \"c\" && command[1] === expectedCommand) {\n            callback();\n        }\n    })\n}\n\n"]]},{"start1":3047,"length1":67,"diffs":[[1,"    serial.writeString(`c:startRecord:${classId}\\n`)\n"]]},{"start1":3143,"length1":65,"diffs":[[1,"    serial.writeString(`c:endRecord:${classId}\\n`)\n"]]}]},{"type":"edited","filename":"serialCommand.ts","patch":[{"start1":1470,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1759395117931,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1300,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLOrangeStart\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"19\" y=\"152\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLGreenStart\" x=\"-2\" y=\"320\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":37,"length1":107,"diffs":[[1,"    music.play(music.builtinPlayableSoundEffect(soundExpression.soaring), music.PlaybackMode.UntilDone)\n"]]},{"start1":180,"length1":107,"diffs":[[1,"    music.play(music.builtinPlayableSoundEffect(soundExpression.twinkle), music.PlaybackMode.UntilDone)\n"]]},{"start1":324,"length1":106,"diffs":[[1,"    music.play(music.builtinPlayableSoundEffect(soundExpression.giggle), music.PlaybackMode.UntilDone)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":589,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":19,"length1":0,"diffs":[[1,"const sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst speech = [\n    \"Hello\",\n    \"Awesome\",\n    \"Yes\"\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n"]]},{"start1":514,"length1":646,"diffs":[[1,""]]},{"start1":516,"length1":660,"diffs":[[1,"// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n"]]},{"start1":689,"length1":0,"diffs":[[1,"    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n"]]},{"start1":984,"length1":3,"diffs":[[1,""]]}]},{"type":"edited","filename":"commandMap.ts","patch":[{"start1":83,"length1":0,"diffs":[[1,"\n\n"]]}]}]},{"timestamp":1759395707692,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":589,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":353,"length1":0,"diffs":[[1,"    const speech = [\n        \"Hello\",\n        \"Awesome\",\n        \"Yes\"\n    ]\n"]]},{"start1":667,"length1":0,"diffs":[[1,"\n"]]},{"start1":739,"length1":44,"diffs":[[1,""]]},{"start1":761,"length1":57,"diffs":[[1,""]]},{"start1":1327,"length1":1058,"diffs":[[1,""]]},{"start1":1328,"length1":1008,"diffs":[[1,""]]},{"start1":1334,"length1":0,"diffs":[[1,"\n"]]},{"start1":1338,"length1":0,"diffs":[[1,"// Serial commands\nserial.setRxBufferSize(128)\nSerialCommands.onCommandwithArg(\"display\", (value) => {\n    if (value === -1) {\n        basic.clearScreen()\n    } else {\n        basic.showIcon(value)\n    }\n})\nSerialCommands.onCommandwithArg(\"servo\", (value) => {\n    servoMode = \"\"\n    if (value === -1) {\n        servos.P0.stop()\n        return\n    }\n    const servoOption = servoOptions[value]\n    if (typeof servoOption === \"number\") {\n        servos.P0.setAngle(servoOption)\n    } else {\n        servoMode = servoOption\n    }\n})\nSerialCommands.onCommandwithArg(\"sound\", (value) => {\n    if (value === -1) {\n        music.stopAllSounds()\n    }\n    if (sounds[value]) {\n        music.stopAllSounds()\n        music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n    }\n})\n"]]},{"start1":2149,"length1":0,"diffs":[[1,"// Record data for class\nconst startRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('startRecord', classId)\n}\nconst endRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('endRecord', classId)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n"]]}]}]},{"timestamp":1759396395348,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1299,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLOrangeStart\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"19\" y=\"152\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLGreenStart\" x=\"-2\" y=\"320\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block></xml>"]]}]}]},{"timestamp":1759396398347,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1298,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLOrangeStart\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"0\" y=\"149\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLGreenStart\" x=\"-2\" y=\"320\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":589,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":20,"length1":437,"diffs":[[1,"namespace Default {\n    const sounds = [\n        soundExpression.giggle,\n        soundExpression.happy,\n        soundExpression.hello,\n        soundExpression.mysterious,\n        soundExpression.sad,\n        soundExpression.soaring,\n        soundExpression.spring,\n        soundExpression.twinkle,\n        soundExpression.yawn\n    ]\n    const servoOptions = [\n        \"slow wave\",\n        \"fast wave\",\n        0,\n        15,\n        30,\n        45,\n        60,\n        75,\n        90,\n        105,\n        120,\n        135,\n        150,\n        165,\n        180\n    ];\n"]]},{"start1":590,"length1":58,"diffs":[[1,"    // Initialise servo.\n    let servoMode = \"\"\n    let prevAngle = 0\n"]]},{"start1":661,"length1":0,"diffs":[[1,"    let initialised = false\n    init()\n    \n    function init() {\n        if (initialised) {\n            return;\n        }\n        serial.setRxBufferSize(128)\n        basic.forever(function () {\n            if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n                return\n            }\n            let newAngle\n            const isSlowWave = servoMode === \"slow wave\"\n            if (prevAngle < 90) {\n                newAngle = isSlowWave ? 165 : 120\n            } else {\n                newAngle = isSlowWave ? 15 : 60\n            }\n            basic.pause(isSlowWave ? 500 : 250)\n            prevAngle = newAngle\n            servos.P0.setAngle(newAngle)\n        })\n"]]},{"start1":1350,"length1":437,"diffs":[[1,"        // Serial commands\n        serial.setRxBufferSize(128)\n        SerialCommands.onCommandwithArg(\"display\", (value) => {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n        })\n        SerialCommands.onCommandwithArg(\"servo\", (value) => {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n        })\n        SerialCommands.onCommandwithArg(\"sound\", (value) => {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n        })\n"]]},{"start1":2409,"length1":810,"diffs":[[1,"        // Record data for class\n        const startRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('startRecord', classId)\n        }\n        const endRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('endRecord', classId)\n        }\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\n        input.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\n        input.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n"]]},{"start1":3390,"length1":135,"diffs":[[1,"        initialised = true\n    }\n"]]},{"start1":3425,"length1":707,"diffs":[[1,"\n\n"]]}]}]},{"timestamp":1759396945626,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"default.ts","patch":[{"start1":20,"length1":569,"diffs":[[1,"const sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n"]]},{"start1":458,"length1":70,"diffs":[[1,"// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\n"]]},{"start1":517,"length1":688,"diffs":[[1,""]]},{"start1":518,"length1":1058,"diffs":[[1,"serial.setRxBufferSize(128)\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n"]]},{"start1":956,"length1":1008,"diffs":[[1,"// Serial commands\nserial.setRxBufferSize(128)\nSerialCommands.onCommandwithArg(\"display\", (value) => {\n    if (value === -1) {\n        basic.clearScreen()\n    } else {\n        basic.showIcon(value)\n"]]},{"start1":1160,"length1":0,"diffs":[[1,"})\nSerialCommands.onCommandwithArg(\"servo\", (value) => {\n    servoMode = \"\"\n    if (value === -1) {\n        servos.P0.stop()\n        return\n    }\n    const servoOption = servoOptions[value]\n    if (typeof servoOption === \"number\") {\n        servos.P0.setAngle(servoOption)\n    } else {\n        servoMode = servoOption\n    }\n})\nSerialCommands.onCommandwithArg(\"sound\", (value) => {\n    if (value === -1) {\n        music.stopAllSounds()\n    }\n    if (sounds[value]) {\n        music.stopAllSounds()\n        music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('startRecord', classId)\n"]]},{"start1":1904,"length1":0,"diffs":[[1,"const endRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('endRecord', classId)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n"]]}]},{"type":"edited","filename":"commandMap.ts","patch":[{"start1":777,"length1":49,"diffs":[[1,""]]},{"start1":952,"length1":58,"diffs":[[1,""]]},{"start1":1243,"length1":61,"diffs":[[1,""]]}]}]},{"timestamp":1759397602440,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"commandMap.ts","patch":[{"start1":777,"length1":45,"diffs":[[1,"            serial.writeLine(`push ${callback}`)\n"]]}]}]},{"timestamp":1759397606450,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"commandMap.ts","patch":[{"start1":777,"length1":52,"diffs":[[1,"            serial.writeLine(`push ${comm}`)\n"]]},{"start1":1497,"length1":49,"diffs":[[1,""]]}]}]},{"timestamp":1759398170186,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":714,"length1":155,"diffs":[[1,""]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":20,"length1":437,"diffs":[[1,"namespace Default {\n    const sounds = [\n        soundExpression.giggle,\n        soundExpression.happy,\n        soundExpression.hello,\n        soundExpression.mysterious,\n        soundExpression.sad,\n        soundExpression.soaring,\n        soundExpression.spring,\n        soundExpression.twinkle,\n        soundExpression.yawn\n    ]\n    const servoOptions = [\n        \"slow wave\",\n        \"fast wave\",\n        0,\n        15,\n        30,\n        45,\n        60,\n        75,\n        90,\n        105,\n        120,\n        135,\n        150,\n        165,\n        180\n    ];\n"]]},{"start1":590,"length1":58,"diffs":[[1,"    // Initialise servo.\n    let servoMode = \"\"\n    let prevAngle = 0\n"]]},{"start1":661,"length1":437,"diffs":[[1,"    let initialised = false\n    init()\n    \n    function init() {\n        if (initialised) {\n            return;\n        }\n        serial.setRxBufferSize(128)\n        basic.forever(function () {\n            if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n                return\n            }\n            let newAngle\n            const isSlowWave = servoMode === \"slow wave\"\n            if (prevAngle < 90) {\n                newAngle = isSlowWave ? 165 : 120\n            } else {\n                newAngle = isSlowWave ? 15 : 60\n            }\n            basic.pause(isSlowWave ? 500 : 250)\n            prevAngle = newAngle\n            servos.P0.setAngle(newAngle)\n        })\n"]]},{"start1":1350,"length1":810,"diffs":[[1,"        // Serial commands\n        serial.setRxBufferSize(128)\n        SerialCommands.onCommandwithArg(\"display\", (value) => {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n        })\n        SerialCommands.onCommandwithArg(\"servo\", (value) => {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n        })\n        SerialCommands.onCommandwithArg(\"sound\", (value) => {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n        })\n"]]},{"start1":2409,"length1":844,"diffs":[[1,"        // Record data for class\n        const startRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('startRecord', classId)\n        }\n        const endRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('endRecord', classId)\n        }\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\n        input.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\n        input.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n"]]},{"start1":3390,"length1":0,"diffs":[[1,"        initialised = true\n    }\n}\n"]]}]}]},{"timestamp":1759398769030,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":333,"length1":22,"diffs":[[1,""]]},{"start1":714,"length1":0,"diffs":[[1,"\nSerialCommands.onCommandwithArg(\"display\", (value) => {\n    if (value === -1) {\n        basic.clearScreen()\n    } else {\n        basic.showIcon()\n    }\n})"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":20,"length1":568,"diffs":[[1,"const sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n"]]},{"start1":458,"length1":123,"diffs":[[1,"// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\n"]]},{"start1":517,"length1":665,"diffs":[[1,"serial.setRxBufferSize(128)\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n"]]},{"start1":955,"length1":2073,"diffs":[[1,"// Serial commands\nserial.setRxBufferSize(128)\nSerialCommands.onCommandwithArg(\"display\", (value) => {\n    if (value === -1) {\n        basic.clearScreen()\n    } else {\n        basic.showIcon(value)\n"]]},{"start1":1159,"length1":0,"diffs":[[1,"})\nSerialCommands.onCommandwithArg(\"servo\", (value) => {\n    servoMode = \"\"\n    if (value === -1) {\n        servos.P0.stop()\n        return\n    }\n    const servoOption = servoOptions[value]\n    if (typeof servoOption === \"number\") {\n        servos.P0.setAngle(servoOption)\n    } else {\n        servoMode = servoOption\n    }\n})\nSerialCommands.onCommandwithArg(\"sound\", (value) => {\n    if (value === -1) {\n        music.stopAllSounds()\n    }\n    if (sounds[value]) {\n        music.stopAllSounds()\n        music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('startRecord', classId)\n"]]},{"start1":1903,"length1":0,"diffs":[[1,"const endRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('endRecord', classId)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n\n"]]}]}]},{"timestamp":1759399366734,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":333,"length1":0,"diffs":[[1,"        initDefault()\n"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":20,"length1":437,"diffs":[[1,"namespace Custom {\n    const sounds = [\n        soundExpression.giggle,\n        soundExpression.happy,\n        soundExpression.hello,\n        soundExpression.mysterious,\n        soundExpression.sad,\n        soundExpression.soaring,\n        soundExpression.spring,\n        soundExpression.twinkle,\n        soundExpression.yawn\n    ]\n    const servoOptions = [\n        \"slow wave\",\n        \"fast wave\",\n        0,\n        15,\n        30,\n        45,\n        60,\n        75,\n        90,\n        105,\n        120,\n        135,\n        150,\n        165,\n        180\n    ];\n"]]},{"start1":589,"length1":495,"diffs":[[1,"    // Initialise servo.\n    let servoMode = \"\"\n    let prevAngle = 0\n    let initialisedDefault = false\n    initDefault()\n"]]},{"start1":713,"length1":828,"diffs":[[1,"    export function initDefault () {\n        if (initialisedDefault) {\n            return\n        }\n        serial.setRxBufferSize(128)\n        basic.forever(function () {\n            if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n                return\n            }\n            let newAngle\n            const isSlowWave = servoMode === \"slow wave\"\n            if (prevAngle < 90) {\n                newAngle = isSlowWave ? 165 : 120\n            } else {\n                newAngle = isSlowWave ? 15 : 60\n            }\n            basic.pause(isSlowWave ? 500 : 250)\n            prevAngle = newAngle\n            servos.P0.setAngle(newAngle)\n        })\n"]]},{"start1":1379,"length1":135,"diffs":[[1,"        // Serial commands\n        serial.setRxBufferSize(128)\n        SerialCommands.onCommandwithArg(\"display\", (value) => {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n        })\n        SerialCommands.onCommandwithArg(\"servo\", (value) => {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n        })\n        SerialCommands.onCommandwithArg(\"sound\", (value) => {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n        })\n\n        // Record data for class\n        const startRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('startRecord', classId)\n        }\n        const endRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('endRecord', classId)\n        }\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\n        input.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\n        input.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n        initialisedDefault = true\n    }\n"]]},{"start1":3460,"length1":706,"diffs":[[1,""]]}]},{"type":"edited","filename":"commandMap.ts","patch":[{"start1":563,"length1":52,"diffs":[[1,""]]}]}]},{"timestamp":1759400167521,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"commandMap.ts","patch":[{"start1":881,"length1":13,"diffs":[[1,""]]}]}]},{"timestamp":1759400241332,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"commandMap.ts","patch":[{"start1":333,"length1":62,"diffs":[[1,""]]},{"start1":677,"length1":78,"diffs":[[1,""]]},{"start1":881,"length1":0,"diffs":[[1,"            \n"]]},{"start1":959,"length1":85,"diffs":[[1,""]]},{"start1":1069,"length1":78,"diffs":[[1,"            serial.writeLine(this.commandNames.join(\",\"))\n"]]},{"start1":1418,"length1":85,"diffs":[[1,"            serial.writeLine(this.argCommandNames.join(\",\"))\n"]]}]},{"type":"edited","filename":"serialCommand.ts","patch":[{"start1":145,"length1":5,"diffs":[[1,"\n"]]},{"start1":174,"length1":56,"diffs":[[1,""]]}]}]},{"timestamp":1759400767634,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"serialCommand.ts","patch":[{"start1":234,"length1":25,"diffs":[[1,"        if (initialised) {\n"]]}]}]},{"timestamp":1759400947305,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":235,"length1":31,"diffs":[[1,"    //% block=\"on ML green start\"\n"]]}]}]},{"timestamp":1759401655444,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"custom.ts","patch":[{"start1":388,"length1":32,"diffs":[[1,"    //% block=\"on ML purple start\"\n"]]}]}]},{"timestamp":1759401661404,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1302,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLOrangeStart\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"0\" y=\"149\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLGreenStart\" x=\"2\" y=\"307\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"custom.ts","patch":[{"start1":548,"length1":32,"diffs":[[1,"    //% block=\"on ML orange start\"\n"]]}]},{"type":"edited","filename":"default.ts","patch":[{"start1":20,"length1":0,"diffs":[[1,"const sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n"]]},{"start1":458,"length1":0,"diffs":[[1,"// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nserial.setRxBufferSize(128)\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\n// Serial commands\nserial.setRxBufferSize(128)\nSerialCommands.onCommandwithArg(\"display\", function (value) {\n    if (value === -1) {\n        basic.clearScreen()\n    } else {\n        basic.showIcon(value)\n    }\n})\nSerialCommands.onCommandwithArg(\"servo\", function (value) {\n    servoMode = \"\"\n    if (value === -1) {\n        servos.P0.stop()\n        return\n    }\n    const servoOption = servoOptions[value]\n    if (typeof servoOption === \"number\") {\n        servos.P0.setAngle(servoOption)\n    } else {\n        servoMode = servoOption\n    }\n})\nSerialCommands.onCommandwithArg(\"sound\", function (value) {\n    if (value === -1) {\n        music.stopAllSounds()\n    }\n    if (sounds[value]) {\n        music.stopAllSounds()\n        music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n    }\n})\n\n"]]}]},{"type":"edited","filename":"serialCommand.ts","patch":[{"start1":40,"length1":983,"diffs":[[1,""]]},{"start1":178,"length1":69,"diffs":[[1,"        serial.writeLine(`initialised? ${initialised}`)\n"]]},{"start1":413,"length1":1014,"diffs":[[1,""]]}]}]},{"timestamp":1759402128573,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"default.ts","patch":[{"start1":19,"length1":576,"diffs":[[1,""]]},{"start1":20,"length1":70,"diffs":[[1,""]]},{"start1":21,"length1":2829,"diffs":[[1,"// Record data for class\nconst startRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('startRecord', classId)\n"]]},{"start1":158,"length1":1,"diffs":[[1,"const endRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('endRecord', classId)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))"]]}]},{"type":"edited","filename":"serialCommand.ts","patch":[{"start1":41,"length1":0,"diffs":[[1,"const sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nserial.setRxBufferSize(128)\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\n// Serial commands\nserial.setRxBufferSize(128)\n\n"]]},{"start1":1409,"length1":29,"diffs":[[1,"\n        SerialCommands.onCommandwithArg(\"display\", function (value) {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n        })\n        SerialCommands.onCommandwithArg(\"servo\", function (value) {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n        })\n        SerialCommands.onCommandwithArg(\"sound\", function (value) {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n        })\n"]]}]}]},{"timestamp":1759402684157,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1294,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLGreenStart\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"20\" y=\"196\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLOrangeStart\" x=\"24\" y=\"354\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":37,"length1":105,"diffs":[[1,"    music.play(music.builtinPlayableSoundEffect(soundExpression.soaring), music.PlaybackMode.InBackground)\n"]]},{"start1":183,"length1":106,"diffs":[[1,"    music.play(music.builtinPlayableSoundEffect(soundExpression.twinkle), music.PlaybackMode.InBackground)\n"]]},{"start1":330,"length1":105,"diffs":[[1,"    music.play(music.builtinPlayableSoundEffect(soundExpression.giggle), music.PlaybackMode.InBackground)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":28,"diffs":[[1,"    \"name\": \"Extension maybe?\",\n"]]},{"start1":589,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"commandMap.ts","patch":[{"start1":333,"length1":0,"diffs":[[1,"            serial.writeLine(\"CommandCallbacks constructor!\")\n"]]},{"start1":625,"length1":0,"diffs":[[1,"            serial.writeLine(`push ${commandName}`)\n"]]},{"start1":739,"length1":0,"diffs":[[1,"            serial.writeLine(`command names: ${this.commandNames.join(\",\")}`)\n"]]},{"start1":969,"length1":0,"diffs":[[1,"            serial.writeLine(`push ${commandName}`)\n"]]},{"start1":1086,"length1":0,"diffs":[[1,"            serial.writeLine(`arg command names: ${this.argCommandNames.join(\",\")}`)\n"]]},{"start1":1281,"length1":0,"diffs":[[1,"            serial.writeLine(`command names: ${this.commandNames.join(\",\")}`)\n"]]},{"start1":1650,"length1":0,"diffs":[[1,"            serial.writeLine(`arg command names: ${this.argCommandNames.join(\",\")}`)\n"]]},{"start1":1825,"length1":0,"diffs":[[1,"            serial.writeLine(`${callbackIndex}`)\n"]]}]}]},{"timestamp":1759403217434,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1606,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLGreenStart\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"0\" y=\"176\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.happy</field></block></value></block></statement></block><block type=\"Custom_onMLOrangeStart\" x=\"4\" y=\"334\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.hello</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":331,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1759328946106,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"J}U@pY^R7Duv{G8kr%k1\">value</variable><variable id=\"#z}!}v#@ga.A?ksrRXK-\">effect</variable><variable id=\"2[di|kp)4b~0FO[RKb)2\">sounds</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"2[di|kp)4b~0FO[RKb)2\">sounds</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_create_with\" inline=\"false\"><mutation items=\"9\" horizontalafter=\"3\"></mutation><value name=\"ADD0\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.giggle</field></block></value><value name=\"ADD1\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.happy</field></block></value><value name=\"ADD2\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.hello</field></block></value><value name=\"ADD3\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.mysterious</field></block></value><value name=\"ADD4\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.sad</field></block></value><value name=\"ADD5\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.soaring</field></block></value><value name=\"ADD6\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.spring</field></block></value><value name=\"ADD7\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.twinkle</field></block></value><value name=\"ADD8\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.yawn</field></block></value></block></value><next><block type=\"BLECommands_showPairingHistogram\"></block></next></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"575\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">servo</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"2\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1047\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">display</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"basic.showIcon(value)\" numlines=\"1\"></mutation></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1518\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">sound</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"#z}!}v#@ga.A?ksrRXK-\">effect</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_index_get\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"2[di|kp)4b~0FO[RKb)2\">sounds</field></block></value><value name=\"INDEX\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value></block></value><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#z}!}v#@ga.A?ksrRXK-\">effect</field></block></value><statement name=\"DO0\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">music.builtinPlayableSoundEffect(effect)</field></block></value></block></statement></block></next></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1524\" y=\"311\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">speech</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value></block><block type=\"bluetooth_on_connected\" x=\"0\" y=\"693\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"bluetooth_on_disconnected\" x=\"272\" y=\"693\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Sad</field></block></statement></block><block type=\"device_button_event\" x=\"573\" y=\"693\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"992\" y=\"693\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"1411\" y=\"693\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></statement></block></xml>","main.ts":"const sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst speech = [\n    \"Hello\",\n    \"Awesome\",\n    \"Yes\"\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n\n\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\nbluetooth.onBluetoothConnected(function () {\n    basic.showIcon(IconNames.Happy)\n})\nbluetooth.onBluetoothDisconnected(function () {\n    servoMode = \"\"\n    basic.showIcon(IconNames.Sad)\n})\n\n// Trigger commands\nconst triggerCommands = (cmd: string, value: number) => {\n    switch (cmd) {\n        case \"speech\": {\n            // TODO: allow string args and use value directly\n            billy.say(speech[value])\n            return;\n        }\n        case \"display\": {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n            return;\n        }\n        case \"camera\": {\n            if (input.magneticForce(Dimension.Z) > 350) {\n                BLECommands.sendCommandWithArgument(\"camera\", 1)\n            } else {\n                BLECommands.sendCommandWithArgument(\"camera\", 0)\n            }\n            return;\n        }\n        case \"servo\": {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n            return;\n        }\n        case \"sound\": {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\n// BLE commands\nBLECommands.onCommandwithArg(\"speech\", function (value) {\n    triggerCommands(\"speech\", value)\n})\nBLECommands.onCommandwithArg(\"camera\", function (value) {\n    triggerCommands(\"camera\", value)\n})\nBLECommands.onCommandwithArg(\"display\", function (value) {\n    triggerCommands(\"display\", value)\n})\nBLECommands.onCommandwithArg(\"servo\", function (value) {\n    triggerCommands(\"servo\", value)\n})\nBLECommands.onCommandwithArg(\"sound\", function (value) {\n    triggerCommands(\"sound\", value)\n})\n\n// Serial commands\nserial.setRxBufferSize(128)\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), function() {\n    const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n    // basic.showString(commandStr[commandStr.length - 1])\n    const command = commandStr.split(\":\", 3)\n    serial.writeLine(commandStr)\n    if (command[0] === \"c\" && command.length > 2) {\n        triggerCommands(command[1], parseInt(command[2]))\n    } else {\n        serial.writeLine(\"unknown message type\")\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    BLECommands.sendCommandWithArgument(\"startRecord\", classId)\n    serial.writeString(`c:startRecord:${classId}\\n`)\n}\nconst endRecord = (classId: number) => {\n    BLECommands.sendCommandWithArgument(\"endRecord\", classId)\n    serial.writeString(`c:endRecord:${classId}\\n`)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n\nBLECommands.showPairingHistogram()","README.md":"","pxt.json":"{\n    \"name\": \"TMv1Integration\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-bluetooth-commands\": \"github:jaustin/pxt-bluetooth-commands#aea492d96ec260d9a999efd17e38aaa1abe1da2f\",\n        \"bluetooth\": \"*\",\n        \"Billy\": \"github:adamish/pxt-billy#v0.0.25\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759336420353,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"J}U@pY^R7Duv{G8kr%k1\">value</variable><variable id=\"#z}!}v#@ga.A?ksrRXK-\">effect</variable><variable id=\"2[di|kp)4b~0FO[RKb)2\">sounds</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"2[di|kp)4b~0FO[RKb)2\">sounds</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_create_with\" inline=\"false\"><mutation items=\"9\" horizontalafter=\"3\"></mutation><value name=\"ADD0\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.giggle</field></block></value><value name=\"ADD1\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.happy</field></block></value><value name=\"ADD2\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.hello</field></block></value><value name=\"ADD3\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.mysterious</field></block></value><value name=\"ADD4\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.sad</field></block></value><value name=\"ADD5\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.soaring</field></block></value><value name=\"ADD6\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.spring</field></block></value><value name=\"ADD7\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.twinkle</field></block></value><value name=\"ADD8\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">soundExpression.yawn</field></block></value></block></value><next><block type=\"BLECommands_showPairingHistogram\"></block></next></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"575\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">servo</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"2\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1047\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">display</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"basic.showIcon(value)\" numlines=\"1\"></mutation></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1518\" y=\"0\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">sound</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"#z}!}v#@ga.A?ksrRXK-\">effect</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"lists_index_get\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"2[di|kp)4b~0FO[RKb)2\">sounds</field></block></value><value name=\"INDEX\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value></block></value><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#z}!}v#@ga.A?ksrRXK-\">effect</field></block></value><statement name=\"DO0\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">music.builtinPlayableSoundEffect(effect)</field></block></value></block></statement></block></next></block></statement></block><block type=\"BLECommands_onCommandwithArg\" x=\"1524\" y=\"311\"><value name=\"arg\"><shadow type=\"text\"><field name=\"TEXT\">speech</field></shadow></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"variables_get_reporter\" deletable=\"false\"><field name=\"VAR\" id=\"J}U@pY^R7Duv{G8kr%k1\">value</field></block></value></block><block type=\"bluetooth_on_connected\" x=\"0\" y=\"693\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"bluetooth_on_disconnected\" x=\"272\" y=\"693\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Sad</field></block></statement></block><block type=\"device_button_event\" x=\"573\" y=\"693\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"992\" y=\"693\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement></block><block type=\"input_logo_event\" x=\"1411\" y=\"693\"><field name=\"action\">TouchButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"BLECommands_sendCommandWithArgument\"><value name=\"command\"><shadow type=\"text\"><field name=\"TEXT\">photo</field></shadow></value><value name=\"arg\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></statement></block></xml>","main.ts":"const sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst speech = [\n    \"Hello\",\n    \"Awesome\",\n    \"Yes\"\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n\n\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\nbluetooth.onBluetoothConnected(function () {\n    basic.showIcon(IconNames.Happy)\n})\nbluetooth.onBluetoothDisconnected(function () {\n    servoMode = \"\"\n    basic.showIcon(IconNames.Sad)\n})\n\n// Trigger commands\nconst triggerCommands = (cmd: string, value: number) => {\n    switch (cmd) {\n        case \"speech\": {\n            // TODO: allow string args and use value directly\n            billy.say(speech[value])\n            return;\n        }\n        case \"display\": {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n            return;\n        }\n        case \"camera\": {\n            if (input.magneticForce(Dimension.Z) > 350) {\n                BLECommands.sendCommandWithArgument(\"camera\", 1)\n            } else {\n                BLECommands.sendCommandWithArgument(\"camera\", 0)\n            }\n            return;\n        }\n        case \"servo\": {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n            return;\n        }\n        case \"sound\": {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\n// BLE commands\nBLECommands.onCommandwithArg(\"speech\", function (value) {\n    triggerCommands(\"speech\", value)\n})\nBLECommands.onCommandwithArg(\"camera\", function (value) {\n    triggerCommands(\"camera\", value)\n})\nBLECommands.onCommandwithArg(\"display\", function (value) {\n    triggerCommands(\"display\", value)\n})\nBLECommands.onCommandwithArg(\"servo\", function (value) {\n    triggerCommands(\"servo\", value)\n})\nBLECommands.onCommandwithArg(\"sound\", function (value) {\n    triggerCommands(\"sound\", value)\n})\n\n// Serial commands\nserial.setRxBufferSize(128)\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), function() {\n    const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n    // basic.showString(commandStr[commandStr.length - 1])\n    const command = commandStr.split(\":\", 3)\n    serial.writeLine(commandStr)\n    if (command[0] === \"c\" && command.length > 2) {\n        triggerCommands(command[1], parseInt(command[2]))\n    } else {\n        serial.writeLine(\"unknown message type\")\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    BLECommands.sendCommandWithArgument(\"startRecord\", classId)\n    serial.writeString(`c:startRecord:${classId}\\n`)\n}\nconst endRecord = (classId: number) => {\n    BLECommands.sendCommandWithArgument(\"endRecord\", classId)\n    serial.writeString(`c:endRecord:${classId}\\n`)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n\nBLECommands.showPairingHistogram()","README.md":"","pxt.json":"{\n    \"name\": \"Extension maybe?\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-bluetooth-commands\": \"github:jaustin/pxt-bluetooth-commands#aea492d96ec260d9a999efd17e38aaa1abe1da2f\",\n        \"bluetooth\": \"*\",\n        \"Billy\": \"github:adamish/pxt-billy#v0.0.25\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759392366076,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>","main.ts":"","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Custom blocks\n */\n//% weight=120 color=#3E80F6 icon=\"\" block=\"Machine Learning\"\nnamespace Custom {\n    //% blockId=ml_on_green_start\n    //% block=\"on ML green start\"\n    //% weight=50\n    export function onMLGreenStart(body: () => {}): void {\n        // Add code here\n    }\n\n    //% blockId=ml_on_purple_start\n    //% block=\"on ML purple start\"\n    //% weight=50\n    export function onMLPurpleStart(body: () => {}): void {\n        // Add code here\n    }\n    \n    //% blockId=ml_on_orange_start\n    //% block=\"on ML orange start\"\n    //% weight=50\n    export function onMLOrangeStart(body: () => {}): void {\n        // Add code here\n    }\n}\n","default.ts":"// Default program\nconst sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst speech = [\n    \"Hello\",\n    \"Awesome\",\n    \"Yes\"\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n\n\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\n// Trigger commands\nconst triggerCommands = (cmd: string, value: number) => {\n    switch (cmd) {\n        case \"display\": {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n            return;\n        }\n        case \"servo\": {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n            return;\n        }\n        case \"sound\": {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\n// Serial commands\nserial.setRxBufferSize(128)\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n    const command = commandStr.split(\":\", 3)\n    if (command[0] === \"c\" && command.length > 2) {\n        triggerCommands(command[1], parseInt(command[2]))\n    } else {\n        serial.writeLine(\"unknown message type\")\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    serial.writeString(`c:startRecord:${classId}\\n`)\n}\nconst endRecord = (classId: number) => {\n    serial.writeString(`c:endRecord:${classId}\\n`)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n","pxt.json":"{\n    \"name\": \"Extension maybe?\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"default.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1759394219856,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"Custom_onMLOrangeStart\" x=\"116\" y=\"215\"></block></xml>","main.ts":"Custom.onMLOrangeStart(function () {\n\t\n})\n","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Custom blocks\n */\n//% weight=120 color=#3E80F6 icon=\"\" block=\"Machine Learning\"\nnamespace Custom {\n    \n    //% block=\"on ML green start\"\n    export function onMLGreenStart(handler: () => void): void {\n        onSerialCommand(\"green\", handler)\n    }\n\n    //% block=\"on ML purple start\"\n    export function onMLPurpleStart(handler: () => void): void {\n        onSerialCommand(\"purple\", handler)\n    }\n    \n    //% block=\"on ML orange start\"\n    export function onMLOrangeStart(handler: () => void): void {\n        onSerialCommand(\"orange\", handler)\n    }\n}\n","default.ts":"// Default program\nconst sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst speech = [\n    \"Hello\",\n    \"Awesome\",\n    \"Yes\"\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n\n\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\n// Trigger commands\nconst triggerCommands = (cmd: string, value: number) => {\n    switch (cmd) {\n        case \"display\": {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n            return;\n        }\n        case \"servo\": {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n            return;\n        }\n        case \"sound\": {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\n// Serial commands\nserial.setRxBufferSize(128)\nserial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n    const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n    const command = commandStr.split(\":\", 3)\n    serial.writeLine(commandStr);\n    if (command[0] === \"c\" && command.length > 2) {\n        triggerCommands(command[1], parseInt(command[2]))\n    } else {\n        serial.writeLine(\"unknown message type\")\n    }\n})\n\nconst onSerialCommand = (expectedCommand: string, callback: () => void) => {\n    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {\n        const commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine));\n        const command = commandStr.split(\":\", 2);\n        serial.writeLine(commandStr);\n        if (command[0] === \"c\" && command[1] === expectedCommand) {\n            callback();\n        }\n    })\n}\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    serial.writeString(`c:startRecord:${classId}\\n`)\n}\nconst endRecord = (classId: number) => {\n    serial.writeString(`c:endRecord:${classId}\\n`)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n","pxt.json":"{\n    \"name\": \"Extension maybe?\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"default.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759396052392,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLOrangeStart\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"19\" y=\"152\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLGreenStart\" x=\"-2\" y=\"320\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block></xml>","main.ts":"Custom.onMLPurpleStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.soaring), music.PlaybackMode.InBackground)\n})\nCustom.onMLGreenStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.twinkle), music.PlaybackMode.InBackground)\n})\nCustom.onMLOrangeStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.giggle), music.PlaybackMode.InBackground)\n})\n","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Custom blocks\n */\n//% weight=120 color=#3E80F6 icon=\"\" block=\"Machine Learning\"\nnamespace Custom {\n    \n    //% block=\"on ML green start\"\n    export function onMLGreenStart(handler: () => void): void {\n        SerialCommands.onCommand(\"green\", handler)\n    }\n\n    //% block=\"on ML purple start\"\n    export function onMLPurpleStart(handler: () => void): void {\n        SerialCommands.onCommand(\"purple\", handler)\n    }\n    \n    //% block=\"on ML orange start\"\n    export function onMLOrangeStart(handler: () => void): void {\n        SerialCommands.onCommand(\"orange\", handler)\n    }\n}\n","default.ts":"// Default program\n\nnamespace Default {\n    const sounds = [\n        soundExpression.giggle,\n        soundExpression.happy,\n        soundExpression.hello,\n        soundExpression.mysterious,\n        soundExpression.sad,\n        soundExpression.soaring,\n        soundExpression.spring,\n        soundExpression.twinkle,\n        soundExpression.yawn\n    ]\n    const servoOptions = [\n        \"slow wave\",\n        \"fast wave\",\n        0,\n        15,\n        30,\n        45,\n        60,\n        75,\n        90,\n        105,\n        120,\n        135,\n        150,\n        165,\n        180\n    ];\n\n    // Initialise servo.\n    let servoMode = \"\"\n    let prevAngle = 0\n\n    let initialised = false\n    init()\n    \n    function init() {\n        if (initialised) {\n            return;\n        }\n        serial.setRxBufferSize(128)\n        basic.forever(function () {\n            if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n                return\n            }\n            let newAngle\n            const isSlowWave = servoMode === \"slow wave\"\n            if (prevAngle < 90) {\n                newAngle = isSlowWave ? 165 : 120\n            } else {\n                newAngle = isSlowWave ? 15 : 60\n            }\n            basic.pause(isSlowWave ? 500 : 250)\n            prevAngle = newAngle\n            servos.P0.setAngle(newAngle)\n        })\n\n        // Serial commands\n        serial.setRxBufferSize(128)\n        SerialCommands.onCommandwithArg(\"display\", (value) => {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n        })\n        SerialCommands.onCommandwithArg(\"servo\", (value) => {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n        })\n        SerialCommands.onCommandwithArg(\"sound\", (value) => {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n        })\n\n        // Record data for class\n        const startRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('startRecord', classId)\n        }\n        const endRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('endRecord', classId)\n        }\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\n        input.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\n        input.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n\n        initialised = true\n    }\n}\n\n\n","commandMap.ts":"/**\n * Acts as a map of commands names to callbacks\n */\nnamespace SerialCommands {\n    export class CommandCallbacks {\n        private commandNames: string[]\n        private argCommandNames: string[]\n\n        private callbacks: (() => void)[]\n        private argCallbacks: ((value: number) => void)[]\n\n        public constructor() {\n            this.commandNames = []\n            this.argCommandNames = []\n            this.callbacks = []\n            this.argCallbacks = []\n        }\n\n        public addCommandCallback(commandName: string, callback: () => void) {\n            this.commandNames.push(commandName.toLowerCase())\n            this.callbacks.push(callback)\n        }\n\n        public addCommandCallbackwithArg(commandName: string, callback: (value: number) => void) {\n            this.argCommandNames.push(commandName.toLowerCase())\n            this.argCallbacks.push(callback)\n        }\n\n        public fireCallbackFor(commandName: string) {\n            const callbackIndex = this.commandNames.indexOf(commandName.toLowerCase())\n            if (callbackIndex == -1) {\n                return\n            }\n            this.callbacks[callbackIndex]()\n        }\n        public fireCallbackwithArgFor(commandName: string, arg: number) {\n            const callbackIndex = this.argCommandNames.indexOf(commandName.toLowerCase())\n            if (callbackIndex == -1) {\n                return\n            }\n            this.argCallbacks[callbackIndex](arg)\n        }\n    }\n}","serialCommand.ts":"\n/**\n * Serial event/command blocks\n */\nnamespace SerialCommands {\n    let initialised = false\n    export let callbacks: CommandCallbacks = null\n\n    function init(): void {\n        if (initialised) {\n            return\n        }\n        callbacks = new CommandCallbacks();\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), parseInput)\n        initialised = true\n    }\n    function parseInput(): void {\n        let commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n        let command = commandStr.split(\":\", 3)\n        serial.writeLine(commandStr)\n        if (command[0] === \"c\") {\n            if (command.length > 2) {\n                callbacks.fireCallbackwithArgFor(command[1], parseInt(command[2]))\n            } else {\n                callbacks.fireCallbackFor(command[1])\n            }\n        } else {\n            serial.writeLine(\"unknown message type\")\n        }\n    }\n    export function sendCommand(command: string): void {\n        serial.writeLine(\"c:\" + command)\n    }\n    export function sendCommandWithArgument(command: string, arg: number): void {\n        serial.writeLine(\"c:\" + command + \":\" + arg.toString())\n    }\n    export function onCommandwithArg(arg: string, handler: (value: number) => void) {\n        init()\n        callbacks.addCommandCallbackwithArg(arg, handler)\n    }\n    export function onCommand(arg: string, handler: () => void) {\n        init()\n        callbacks.addCommandCallback(arg, handler)\n    }\n}\n","pxt.json":"{\n    \"name\": \"Extension maybe?\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"default.ts\",\n        \"commandMap.ts\",\n        \"serialCommand.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759398125672,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLOrangeStart\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"0\" y=\"149\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLGreenStart\" x=\"2\" y=\"307\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block></xml>","main.ts":"Custom.onMLPurpleStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.soaring), music.PlaybackMode.InBackground)\n})\nCustom.onMLGreenStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.twinkle), music.PlaybackMode.InBackground)\n})\nCustom.onMLOrangeStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.giggle), music.PlaybackMode.InBackground)\n})\n","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Custom blocks\n */\n//% weight=120 color=#3E80F6 icon=\"\" block=\"Machine Learning\"\nnamespace Custom {\n    \n    //% block=\"on ML green start\"\n    export function onMLGreenStart(handler: () => void): void {\n        SerialCommands.onCommand(\"green\", handler)\n    }\n\n    //% block=\"on ML purple start\"\n    export function onMLPurpleStart(handler: () => void): void {\n        SerialCommands.onCommand(\"purple\", handler)\n    }\n    \n    //% block=\"on ML orange start\"\n    export function onMLOrangeStart(handler: () => void): void {\n        SerialCommands.onCommand(\"orange\", handler)\n    }\n}\n","default.ts":"// Default program\n\nnamespace Default {\n    const sounds = [\n        soundExpression.giggle,\n        soundExpression.happy,\n        soundExpression.hello,\n        soundExpression.mysterious,\n        soundExpression.sad,\n        soundExpression.soaring,\n        soundExpression.spring,\n        soundExpression.twinkle,\n        soundExpression.yawn\n    ]\n    const servoOptions = [\n        \"slow wave\",\n        \"fast wave\",\n        0,\n        15,\n        30,\n        45,\n        60,\n        75,\n        90,\n        105,\n        120,\n        135,\n        150,\n        165,\n        180\n    ];\n\n    // Initialise servo.\n    let servoMode = \"\"\n    let prevAngle = 0\n\n    let initialised = false\n    init()\n    \n    function init() {\n        if (initialised) {\n            return;\n        }\n        serial.setRxBufferSize(128)\n        basic.forever(function () {\n            if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n                return\n            }\n            let newAngle\n            const isSlowWave = servoMode === \"slow wave\"\n            if (prevAngle < 90) {\n                newAngle = isSlowWave ? 165 : 120\n            } else {\n                newAngle = isSlowWave ? 15 : 60\n            }\n            basic.pause(isSlowWave ? 500 : 250)\n            prevAngle = newAngle\n            servos.P0.setAngle(newAngle)\n        })\n\n        // Serial commands\n        serial.setRxBufferSize(128)\n        SerialCommands.onCommandwithArg(\"display\", (value) => {\n            if (value === -1) {\n                basic.clearScreen()\n            } else {\n                basic.showIcon(value)\n            }\n        })\n        SerialCommands.onCommandwithArg(\"servo\", (value) => {\n            servoMode = \"\"\n            if (value === -1) {\n                servos.P0.stop()\n                return\n            }\n            const servoOption = servoOptions[value]\n            if (typeof servoOption === \"number\") {\n                servos.P0.setAngle(servoOption)\n            } else {\n                servoMode = servoOption\n            }\n        })\n        SerialCommands.onCommandwithArg(\"sound\", (value) => {\n            if (value === -1) {\n                music.stopAllSounds()\n            }\n            if (sounds[value]) {\n                music.stopAllSounds()\n                music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n            }\n        })\n\n        // Record data for class\n        const startRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('startRecord', classId)\n        }\n        const endRecord = (classId: number) => {\n            SerialCommands.sendCommandWithArgument('endRecord', classId)\n        }\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\n        control.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n            EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\n        input.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\n        input.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))\n\n        initialised = true\n    }\n}\n","commandMap.ts":"/**\n * Acts as a map of commands names to callbacks\n */\nnamespace SerialCommands {\n    export class CommandCallbacks {\n        private commandNames: string[]\n        private argCommandNames: string[]\n\n        private callbacks: (() => void)[]\n        private argCallbacks: ((value: number) => void)[]\n\n        public constructor() {\n            this.commandNames = []\n            this.argCommandNames = []\n            this.callbacks = []\n            this.argCallbacks = []\n        }\n\n        public addCommandCallback(commandName: string, callback: () => void) {\n            this.commandNames.push(commandName.toLowerCase())\n            this.callbacks.push(callback)\n        }\n\n        public addCommandCallbackwithArg(commandName: string, callback: (value: number) => void) {\n            serial.writeLine(`push ${commandName}`)\n            this.argCommandNames.push(commandName.toLowerCase())\n            this.argCallbacks.push(callback)\n        }\n\n        public fireCallbackFor(commandName: string) {\n            serial.writeLine(this.commandNames.join(\",\"))\n            const callbackIndex = this.commandNames.indexOf(commandName.toLowerCase())\n            if (callbackIndex == -1) {\n                return\n            }\n            this.callbacks[callbackIndex]()\n        }\n        public fireCallbackwithArgFor(commandName: string, arg: number) {\n            serial.writeLine(this.argCommandNames.join(\",\"))\n            const callbackIndex = this.argCommandNames.indexOf(commandName.toLowerCase())\n            if (callbackIndex == -1) {\n                return\n            }\n            this.argCallbacks[callbackIndex](arg)\n        }\n    }\n}","serialCommand.ts":"\n/**\n * Serial event/command blocks\n */\nnamespace SerialCommands {\n    let initialised = false\n    export let callbacks: CommandCallbacks = null\n\n    function init(): void {\n        if (initialised) {\n            return\n        }\n        callbacks = new CommandCallbacks();\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), parseInput)\n        initialised = true\n    }\n    function parseInput(): void {\n        let commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n        let command = commandStr.split(\":\", 3)\n        serial.writeLine(commandStr)\n        if (command[0] === \"c\") {\n            if (command.length > 2) {\n                callbacks.fireCallbackwithArgFor(command[1], parseInt(command[2]))\n            } else {\n                callbacks.fireCallbackFor(command[1])\n            }\n        } else {\n            serial.writeLine(\"unknown message type\")\n        }\n    }\n    export function sendCommand(command: string): void {\n        serial.writeLine(\"c:\" + command)\n    }\n    export function sendCommandWithArgument(command: string, arg: number): void {\n        serial.writeLine(\"c:\" + command + \":\" + arg.toString())\n    }\n    export function onCommandwithArg(arg: string, handler: (value: number) => void) {\n        init()\n        callbacks.addCommandCallbackwithArg(arg, handler)\n    }\n    export function onCommand(arg: string, handler: () => void) {\n        init()\n        callbacks.addCommandCallback(arg, handler)\n    }\n}\n","pxt.json":"{\n    \"name\": \"Extension maybe?\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"default.ts\",\n        \"commandMap.ts\",\n        \"serialCommand.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759399976168,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLOrangeStart\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"0\" y=\"149\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLGreenStart\" x=\"2\" y=\"307\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block></xml>","main.ts":"Custom.onMLPurpleStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.soaring), music.PlaybackMode.InBackground)\n})\nCustom.onMLGreenStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.twinkle), music.PlaybackMode.InBackground)\n})\nCustom.onMLOrangeStart(function () {\n    music.play(music.builtinPlayableSoundEffect(soundExpression.giggle), music.PlaybackMode.InBackground)\n})\n","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Custom blocks\n */\n//% weight=120 color=#3E80F6 icon=\"\" block=\"Machine Learning\"\nnamespace Custom {\n    \n    //% block=\"on ML green start\"\n    export function onMLGreenStart(handler: () => void): void {\n        SerialCommands.onCommand(\"green\", handler)\n    }\n\n    //% block=\"on ML purple start\"\n    export function onMLPurpleStart(handler: () => void): void {\n        SerialCommands.onCommand(\"purple\", handler)\n    }\n    \n    //% block=\"on ML orange start\"\n    export function onMLOrangeStart(handler: () => void): void {\n        SerialCommands.onCommand(\"orange\", handler)\n    }\n}\n","default.ts":"// Default program\n\nconst sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nserial.setRxBufferSize(128)\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\n// Serial commands\nserial.setRxBufferSize(128)\nSerialCommands.onCommandwithArg(\"display\", function (value) {\n    if (value === -1) {\n        basic.clearScreen()\n    } else {\n        basic.showIcon(value)\n    }\n})\nSerialCommands.onCommandwithArg(\"servo\", function (value) {\n    servoMode = \"\"\n    if (value === -1) {\n        servos.P0.stop()\n        return\n    }\n    const servoOption = servoOptions[value]\n    if (typeof servoOption === \"number\") {\n        servos.P0.setAngle(servoOption)\n    } else {\n        servoMode = servoOption\n    }\n})\nSerialCommands.onCommandwithArg(\"sound\", function (value) {\n    if (value === -1) {\n        music.stopAllSounds()\n    }\n    if (sounds[value]) {\n        music.stopAllSounds()\n        music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('startRecord', classId)\n}\nconst endRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('endRecord', classId)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))","commandMap.ts":"/**\n * Acts as a map of commands names to callbacks\n */\nnamespace SerialCommands {\n    export class CommandCallbacks {\n        private commandNames: string[]\n        private argCommandNames: string[]\n\n        private callbacks: (() => void)[]\n        private argCallbacks: ((value: number) => void)[]\n\n        public constructor() {\n            this.commandNames = []\n            this.argCommandNames = []\n            this.callbacks = []\n            this.argCallbacks = []\n        }\n\n        public addCommandCallback(commandName: string, callback: () => void) {\n            serial.writeLine(`push ${commandName}`)\n            this.commandNames.push(commandName.toLowerCase())\n            this.callbacks.push(callback)\n        }\n\n        public addCommandCallbackwithArg(commandName: string, callback: (value: number) => void) {\n            serial.writeLine(`push ${commandName}`)\n            this.argCommandNames.push(commandName.toLowerCase())\n            this.argCallbacks.push(callback)\n        }\n\n        public fireCallbackFor(commandName: string) {\n            serial.writeLine(this.commandNames.join(\",\"))\n            const callbackIndex = this.commandNames.indexOf(commandName.toLowerCase())\n            if (callbackIndex == -1) {\n                return\n            }\n            this.callbacks[callbackIndex]()\n        }\n        public fireCallbackwithArgFor(commandName: string, arg: number) {\n            serial.writeLine(this.argCommandNames.join(\",\"))\n            const callbackIndex = this.argCommandNames.indexOf(commandName.toLowerCase())\n            serial.writeLine(`${callbackIndex}`)\n            if (callbackIndex == -1) {\n                return\n            }\n            this.argCallbacks[callbackIndex](arg)\n        }\n    }\n}","serialCommand.ts":"\n/**\n * Serial event/command blocks\n */\nnamespace SerialCommands {\n    let initialised = false\n    export let callbacks: CommandCallbacks = null\n\n    function init(): void {\n        if (initialised) {\n            return\n        }\n        callbacks = new CommandCallbacks();\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), parseInput)\n        initialised = true\n    }\n    function parseInput(): void {\n        let commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n        let command = commandStr.split(\":\", 3)\n        serial.writeLine(commandStr)\n        if (command[0] === \"c\") {\n            if (command.length > 2) {\n                callbacks.fireCallbackwithArgFor(command[1], parseInt(command[2]))\n            } else {\n                callbacks.fireCallbackFor(command[1])\n            }\n        } else {\n            serial.writeLine(\"unknown message type\")\n        }\n    }\n    export function sendCommand(command: string): void {\n        serial.writeLine(\"c:\" + command)\n    }\n    export function sendCommandWithArgument(command: string, arg: number): void {\n        serial.writeLine(\"c:\" + command + \":\" + arg.toString())\n    }\n    export function onCommandwithArg(arg: string, handler: (value: number) => void) {\n        init()\n        callbacks.addCommandCallbackwithArg(arg, handler)\n    }\n    export function onCommand(arg: string, handler: () => void) {\n        init()\n        callbacks.addCommandCallback(arg, handler)\n    }\n}\n","pxt.json":"{\n    \"name\": \"Extension maybe?\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"default.ts\",\n        \"commandMap.ts\",\n        \"serialCommand.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759401803427,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"Custom_onMLGreenStart\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.twinkle</field></block></value></block></statement></block><block type=\"Custom_onMLPurpleStart\" x=\"20\" y=\"196\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.soaring</field></block></value></block></statement></block><block type=\"Custom_onMLOrangeStart\" x=\"24\" y=\"354\"><statement name=\"HANDLER\"><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"music_string_playable\"></shadow><block type=\"soundExpression_builtinPlayableSoundEffect\"><field name=\"soundExpression\">soundExpression.giggle</field></block></value></block></statement></block></xml>","main.ts":"","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Custom blocks\n */\n//% weight=120 color=#3E80F6 icon=\"\" block=\"Machine Learning\"\nnamespace Custom {\n    \n    //% block=\"on green start\"\n    export function onMLGreenStart(handler: () => void): void {\n        SerialCommands.onCommand(\"green\", handler)\n    }\n\n    //% block=\"on purple start\"\n    export function onMLPurpleStart(handler: () => void): void {\n        SerialCommands.onCommand(\"purple\", handler)\n    }\n    \n    //% block=\"on orange start\"\n    export function onMLOrangeStart(handler: () => void): void {\n        SerialCommands.onCommand(\"orange\", handler)\n    }\n}\n","default.ts":"// Default program\n\nconst sounds = [\n    soundExpression.giggle,\n    soundExpression.happy,\n    soundExpression.hello,\n    soundExpression.mysterious,\n    soundExpression.sad,\n    soundExpression.soaring,\n    soundExpression.spring,\n    soundExpression.twinkle,\n    soundExpression.yawn\n]\nconst servoOptions = [\n    \"slow wave\",\n    \"fast wave\",\n    0,\n    15,\n    30,\n    45,\n    60,\n    75,\n    90,\n    105,\n    120,\n    135,\n    150,\n    165,\n    180\n];\n\n// Initialise servo.\nlet servoMode = \"\"\nlet prevAngle = 0\nserial.setRxBufferSize(128)\nbasic.forever(function () {\n    if (servoMode !== \"slow wave\" && servoMode !== \"fast wave\") {\n        return\n    }\n    let newAngle\n    const isSlowWave = servoMode === \"slow wave\"\n    if (prevAngle < 90) {\n        newAngle = isSlowWave ? 165 : 120\n    } else {\n        newAngle = isSlowWave ? 15 : 60\n    }\n    basic.pause(isSlowWave ? 500 : 250)\n    prevAngle = newAngle\n    servos.P0.setAngle(newAngle)\n})\n\n// Serial commands\nserial.setRxBufferSize(128)\nSerialCommands.onCommandwithArg(\"display\", function (value) {\n    if (value === -1) {\n        basic.clearScreen()\n    } else {\n        basic.showIcon(value)\n    }\n})\nSerialCommands.onCommandwithArg(\"servo\", function (value) {\n    servoMode = \"\"\n    if (value === -1) {\n        servos.P0.stop()\n        return\n    }\n    const servoOption = servoOptions[value]\n    if (typeof servoOption === \"number\") {\n        servos.P0.setAngle(servoOption)\n    } else {\n        servoMode = servoOption\n    }\n})\nSerialCommands.onCommandwithArg(\"sound\", function (value) {\n    if (value === -1) {\n        music.stopAllSounds()\n    }\n    if (sounds[value]) {\n        music.stopAllSounds()\n        music.play(music.builtinPlayableSoundEffect(sounds[value]), music.PlaybackMode.InBackground)\n    }\n})\n\n// Record data for class\nconst startRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('startRecord', classId)\n}\nconst endRecord = (classId: number) => {\n    SerialCommands.sendCommandWithArgument('endRecord', classId)\n}\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_A,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(0))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_DOWN, () => startRecord(1))\ncontrol.onEvent(EventBusSource.MICROBIT_ID_BUTTON_B,\n    EventBusValue.MICROBIT_BUTTON_EVT_UP, () => endRecord(1))\ninput.onLogoEvent(TouchButtonEvent.Touched, () => startRecord(2))\ninput.onLogoEvent(TouchButtonEvent.Released, () => endRecord(2))","commandMap.ts":"/**\n * Acts as a map of commands names to callbacks\n */\nnamespace SerialCommands {\n    export class CommandCallbacks {\n        private commandNames: string[]\n        private argCommandNames: string[]\n\n        private callbacks: (() => void)[]\n        private argCallbacks: ((value: number) => void)[]\n\n        public constructor() {\n            serial.writeLine(\"CommandCallbacks constructor!\")\n            this.commandNames = []\n            this.argCommandNames = []\n            this.callbacks = []\n            this.argCallbacks = []\n        }\n\n        public addCommandCallback(commandName: string, callback: () => void) {\n            serial.writeLine(`push ${commandName}`)\n            this.commandNames.push(commandName.toLowerCase())\n            serial.writeLine(`command names: ${this.commandNames.join(\",\")}`)\n            this.callbacks.push(callback)\n        }\n\n        public addCommandCallbackwithArg(commandName: string, callback: (value: number) => void) {\n            serial.writeLine(`push ${commandName}`)\n            this.argCommandNames.push(commandName.toLowerCase())\n            serial.writeLine(`arg command names: ${this.argCommandNames.join(\",\")}`)\n            this.argCallbacks.push(callback)\n        }\n\n        public fireCallbackFor(commandName: string) {\n            serial.writeLine(`command names: ${this.commandNames.join(\",\")}`)\n            const callbackIndex = this.commandNames.indexOf(commandName.toLowerCase())\n            if (callbackIndex == -1) {\n                return\n            }\n            this.callbacks[callbackIndex]()\n        }\n        public fireCallbackwithArgFor(commandName: string, arg: number) {\n            serial.writeLine(`arg command names: ${this.argCommandNames.join(\",\")}`)\n            const callbackIndex = this.argCommandNames.indexOf(commandName.toLowerCase())\n            serial.writeLine(`${callbackIndex}`)\n            if (callbackIndex == -1) {\n                return\n            }\n            this.argCallbacks[callbackIndex](arg)\n        }\n    }\n}","serialCommand.ts":"\n/**\n * Serial event/command blocks\n */\nnamespace SerialCommands {\n    let initialised = false\n    export let callbacks: CommandCallbacks = null\n    \n    function init(): void {\n        serial.writeLine(`initialised? ${initialised}`)\n        if (callbacks) {\n            return\n        }\n        callbacks = new CommandCallbacks();\n        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), parseInput)\n        initialised = true\n    }\n    function parseInput(): void {\n        let commandStr = serial.readUntil(serial.delimiters(Delimiters.NewLine))\n        let command = commandStr.split(\":\", 3)\n        serial.writeLine(commandStr)\n        if (command[0] === \"c\") {\n            if (command.length > 2) {\n                callbacks.fireCallbackwithArgFor(command[1], parseInt(command[2]))\n            } else {\n                callbacks.fireCallbackFor(command[1])\n            }\n        } else {\n            serial.writeLine(\"unknown message type\")\n        }\n    }\n    export function sendCommand(command: string): void {\n        serial.writeLine(\"c:\" + command)\n    }\n    export function sendCommandWithArgument(command: string, arg: number): void {\n        serial.writeLine(\"c:\" + command + \":\" + arg.toString())\n    }\n    export function onCommandwithArg(arg: string, handler: (value: number) => void) {\n        init()\n        callbacks.addCommandCallbackwithArg(arg, handler)\n    }\n    export function onCommand(arg: string, handler: () => void) {\n        init()\n        callbacks.addCommandCallback(arg, handler)\n    }\n}\n","pxt.json":"{\n    \"name\": \"Extension maybe?\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\",\n        \"servo\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\",\n        \"default.ts\",\n        \"commandMap.ts\",\n        \"serialCommand.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[{"id":"38103-85882-33632-34029","timestamp":1759337456375}],"lastSaveTime":1759403386984}